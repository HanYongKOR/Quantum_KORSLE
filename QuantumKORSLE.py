# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Quantum_KORSLE
                                 A QGIS plugin
 Quantum KORSLE
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-07
        git sha              : $Format:%H$
        copyright            : (C) 2021 by KongJu National University
        email                : kofdlfma1@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QFileInfo, QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsProject, QgsVectorLayer, QgsRasterLayer, QgsRectangle
import processing
import qgis.core
import shutil, csv
from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
import time

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .QuantumKORSLE_dialog import Quantum_KORSLEDialog
import os.path
import math

class Quantum_KORSLE:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Quantum_KORSLE_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Quantum KORSLE')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Quantum_KORSLE', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/QuantumKORSLE/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Quantum KORSLE'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Quantum KORSLE'),
                action)
            self.iface.removeToolBarIcon(action)

    def staindexch1(self):
        self.dlg.stano2.setCurrentIndex(self.dlg.stano1.currentIndex())

    def staindexch2(self):
        self.dlg.stano1.setCurrentIndex(self.dlg.stano2.currentIndex())

    def radioR1check(self):
        self.dlg.raindataB.setEnabled(True)
        self.dlg.CstationB.setEnabled(True)
        self.dlg.RrasterB.setEnabled(False)

    def radioR2check(self):
        self.dlg.raindataB.setEnabled(False)
        self.dlg.CstationB.setEnabled(False)
        self.dlg.RrasterB.setEnabled(True)

    def raindataE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select Rainfall data","", '*.csv')
        self.dlg.raindata.setText(filename.replace('/','\\'))

    def CstationE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select Climate station data","", '*.shp')
        self.dlg.Cstation.setText(filename.replace('/','\\'))


        #rows = asdf.height()
        #cols = layer.width()
        #block = vlayer1.block(1,asdf, cols,width)

        
        #self.dlg.Psize.setText(str(int(asdf.width())))
    def tmpDirE (self):
        Dirname = QFileDialog.getExistingDirectory(None, 'Select a folder')
        self.dlg.tmpDir.setText(Dirname.replace('/','\\'))

    def RrasterE (self):
        Dirname = QFileDialog.getExistingDirectory(None, 'Select a folder')
        self.dlg.Rraster.setText(Dirname.replace('/','\\'))

    def CstationLE (self):
        if self.dlg.Cstation.text() == "" :
            self.dlg.CstationL.clear()
        else :
            layer = QgsVectorLayer(self.dlg.Cstation.text(),'asd','ogr')
            provider = layer.dataProvider()
            fields = provider.fields()
            listFieldNames = [field.name() for field in fields]
            self.dlg.CstationL.clear()
            self.dlg.CstationL.addItems(listFieldNames)




    def LSrE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select K factor data","", '*.tif')
        self.dlg.LSr.setText(filename.replace('/','\\'))

    def LSr2E(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select K factor data","", '*.tif')
        self.dlg.LSr2.setText(filename.replace('/','\\'))



    def KrasterE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select K factor data","", '*.tif')
        self.dlg.Kraster.setText(filename.replace('/','\\'))

    def KshpE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select K factor data","", '*.shp')
        self.dlg.Kshp.setText(filename.replace('/','\\'))

    def KshpLE (self):
        if self.dlg.Kshp.text() == "" :
            self.dlg.KshpL.clear()
        else :
            layer = QgsVectorLayer(self.dlg.Kshp.text(),'asd','ogr')
            provider = layer.dataProvider()
            fields = provider.fields()
            listFieldNames = [field.name() for field in fields]
            self.dlg.KshpL.clear()
            self.dlg.KshpL.addItems(listFieldNames)



    def CshpE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select landuse data","", '*.shp')
        self.dlg.Cshp.setText(filename.replace('/','\\'))

    def CtableE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select C factor data","", '*.csv')
        self.dlg.Ctable.setText(filename.replace('/','\\'))

    def CshpLE (self):
        if self.dlg.Cshp.text() == "" :
            self.dlg.CshpL.clear()
        else :
            layer = QgsVectorLayer(self.dlg.Cshp.text(),'asd','ogr')
            provider = layer.dataProvider()
            fields = provider.fields()
            listFieldNames = [field.name() for field in fields]
            self.dlg.CshpL.clear()
            self.dlg.CshpL.addItems(listFieldNames)




    def PshpE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select landuse data","", '*.shp')
        self.dlg.Pshp.setText(filename.replace('/','\\'))

    def PtableE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select P factor data","", '*.csv')
        self.dlg.Ptable.setText(filename.replace('/','\\'))

    def PshpLE (self):
        if self.dlg.Pshp.text() == "" :
            self.dlg.PshpL.clear()
        else :
            layer = QgsVectorLayer(self.dlg.Pshp.text(),'asd','ogr')
            provider = layer.dataProvider()
            fields = provider.fields()
            listFieldNames = [field.name() for field in fields]
            self.dlg.PshpL.clear()
            self.dlg.PshpL.addItems(listFieldNames)

    def PshpL2E (self):
        if self.dlg.Pshp.text() == "" :
            self.dlg.PshpL2.clear()
        elif self.dlg.PshpL.currentText() == "" :
            self.dlg.PshpL2.clear()           
        else :
            layer = QgsVectorLayer(self.dlg.Pshp.text(),'asd','ogr')
            provider = layer.dataProvider()
            fields = provider.fields()
           
            aaa = provider.getFeatures()
            #listFieldNames = [field.name() for field in fields]

            self.dlg.PshpL2.clear()
            #self.dlg.PshpL2.addItems(fields)
            a = []
            for ab in aaa:
                ssss = ab.attributes()
                a.append(ssss[self.dlg.PshpL.currentIndex()])
            list_u = []
            [list_u.append(str(v)) for v in a if v not in list_u] 
            self.dlg.PshpL2.addItems(list_u)


    def WshpE(self):
        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select watershed map","", '*.shp')
        self.dlg.Wshp.setText(filename.replace('/','\\'))

    def WshpLE (self):
        if self.dlg.Wshp.text() == "" :
            self.dlg.WshpL.clear()
        else :
            layer = QgsVectorLayer(self.dlg.Wshp.text(),'asd','ogr')
            provider = layer.dataProvider()
            fields = provider.fields()
            listFieldNames = [field.name() for field in fields]
            self.dlg.WshpL.clear()
            self.dlg.WshpL.addItems(listFieldNames)

            asdf = layer.extent()
            self.dlg.xmin.setText(str(math.floor(asdf.xMinimum())))
            self.dlg.xmax.setText(str(math.ceil(asdf.xMaximum())))
            self.dlg.ymin.setText(str(math.floor(asdf.yMinimum())))
            self.dlg.ymax.setText(str(math.ceil(asdf.yMaximum())))
    
    def RunKORSLE (self):
        myDir = self.dlg.tmpDir.text()
        Dirnum = 1
        if os.path.isdir(myDir + '\\' + 'Results' + str(Dirnum)) == False :
            os.makedirs(myDir + '\\' + 'Results' + str(Dirnum))
        else :
            while os.path.isdir(myDir + '\\' + 'Results' + str(Dirnum)) == True :
                Dirnum = Dirnum + 1
            os.makedirs(myDir + '\\' + 'Results' + str(Dirnum))
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Rmapshp')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Rmap')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'P')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Amap')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Stastics')
        os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Astat')



        extent = QgsRectangle()
        extent.setXMinimum(295039.0000000000000000)
        extent.setXMaximum(296569.0000000000000000)
        extent.setYMinimum(420179.0000000000000000)
        extent.setYMaximum(421584.0000000000000000)
        aaaee = '295039,296569,420179,421584'
#295039,296569,420179,421584


        self.dlg.progressBar.setValue(0)

        rain1 = open(self.dlg.raindata.text(),'r')
        rain1_h = rain1.readline()
        rain1_h = rain1_h.replace('\n','')
        rain1_l = rain1.readlines()
        rain1.close()

        Rcalcc = ['95,0.00115,1.65047,1,2.326238,*','98,0.09084,1.7294,1,-0.11967,*','101,0.009758,1.4863,1,1.69049,*','102,0.002542,2.309417,32.7684,0.92132,+','108,0.025638,1.67671,1,0.757307,*','112,0.291819,1.591707,1,-0.23258,*','114,0.289734,1.423463,1,0.26482,*','115,0.078166,1.564785,1,0.301962,*','121,0.074849,1.391642,1,0.92272,*','127,0.24249,1.3512,1,0.50685,*','129,0.3319,1.5138,0.2964,2.0677,+','130,0.717303,1.253419,3.8125,1.491632,+','131,0.432398,1.404596,1,0.13816,*','133,0.2527,1.4575,1,0.2518,*','140,0.12092,1.668,6.8367,1.127702,+','146,0.119445,1.7191,1,-0.100273,*','156,0.133436,1.63131,10.3128,1.3287,+','159,0.0017,2.32057,158.59,0.47304,+','162,0.007357,2.31622,1,-0.61649,*','169,0.01169,1.71941,1,1.112783,*','170,0.223303,1.364637,1,0.56809,*','184,0.01806,1.77664,1,0.6487,*','185,0.005772,1.927,1,0.8717,*','189,0.040442,1.598898,1,0.7816,*','192,0.403109,1.24209,1,0.60309,*','201,0.000002,2.351,1,3.39209,*','202,0.15065,1.599636,1,0.077535,*','203,0.363415,1.472747,1,-0.023684,*','211,0.001917,1.908183,1,1.261008,*','212,0.027928,1.877257,1,0.035298,*','216,0.7789,1.26966,1,0.010653,*','221,0.084462,1.28375,1,1.264819,*','226,1.151644,1.188996,1,0.186387,*','232,0.157095,1.277386,1,1.024175,*','235,0.276848,1.37414,1,0.53735,*','236,0.055469,1.57566,1,0.726647,*','238,0.37805,1.290668,1,0.47935,*','243,0.093719,1.38782,1,0.917404,*','244,0.058295,1.54611,1,0.708547,*','245,0.186953,1.516213,1,0.24888,*','247,0.4253,1.32885,1,0.357302,*','248,0.498316,1.301265,1,0.309336,*','260,0.17208,1.287065,1,0.975558,*','272,2.04461,1.102205,1,0.0140714,*','273,0.230614,1.317071,1,0.58916,*','278,0.28617,1.26431,1,0.661323,*']
        RfileV = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'RfileV.csv','a')
        RfileV.write(rain1_h + '\n')

        rain1_hh = rain1_h.split(',')

        for i in range(len(rain1_l)):
            raind = rain1_l[i].replace('"','')
            raind = raind.replace('\n','')
            raind = raind.split(',')
            RfileV.write('R' + raind[0])
            for j in range(1,len(raind)):
                for k in range(len(Rcalcc)):
                    Rcalccc = Rcalcc[k].replace('"','')
                    Rcalccc = Rcalccc.replace("'",'')
                    Rcalcccc = Rcalccc.split(',')
                    #QMessageBox.warning(None,"Warning",Rcalccc)
                    if float(rain1_hh[j]) == float(Rcalcccc[0]) :
                        #QMessageBox.warning(None,"Warning",Rcalcccc[5])
                        if Rcalcccc[5] == '*' :
                            mon = raind[0]
                            mon = mon[4:]
                            #QMessageBox.warning(None,"Warning",Rcalcccc[1] + ',' + raind[j] + ',' + Rcalcccc[2] + ',' + mon + ',' + Rcalcccc[4])
                            RfileV.write(',' + str((float(Rcalcccc[1]) * (float(raind[j])**float(Rcalcccc[2]))) * (float(mon) ** float(Rcalcccc[4]))))
            RfileV.write('\n')
        RfileV.close()

        RfileV = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'RfileV.csv','r')
        RfileVH = RfileV.readline()
        RfileVH = RfileVH.replace('\n','')
        RfileVH = RfileVH.replace('"','')
        RfileVH = RfileVH.split(',')

        RfileVL = RfileV.readlines()

        RfileV.close()


        RfileH = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'RfileH.csv','a')

        for i in range(len(RfileVH)):
            RfileH.write(RfileVH[i])
            for j in range(len(RfileVL)):
                RfVL = RfileVL[j].replace('\n','')
                RfVL = RfVL.replace('"','')
                RfVLL = RfVL.split(',')
                RfileH.write(',' + RfVLL[i])
            RfileH.write('\n')
        RfileH.close()


        
        #os.makedirs(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir')


        Rslayer = self.dlg.CstationL.currentText()
        Rshp = processing.run('qgis:refactorfields',{'FIELDS_MAPPING' : [{'expression': Rslayer, 'length': 18, 'name': Rslayer, 'precision': 11, 'type': 10}], 'INPUT' : self.dlg.Cstation.text(), 'OUTPUT': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Cstation.shp'})
        Rshp1 = processing.run("qgis:joinattributestable",{'DISCARD_NONMATCHING':False, 'FIELD':Rslayer,'FIELDS_TO_COPY':[], 'FIELD_2':'station','INPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Cstation.shp','INPUT_2': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'RfileH.csv' ,'METHOD':1,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Cstation2.shp'})


        RfileH = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'RfileH.csv','r')
        RfileHH = RfileH.readline()
        RfileHH = RfileHH.replace('"','')
        RfileHH = RfileHH.replace('\n','')
        RfileHH = RfileHH.split(',')
        RfileH.close()

        for i in range(1,len(RfileHH)):
            Rshp2 = processing.run('qgis:refactorfields',{'FIELDS_MAPPING' : [{'expression': str(RfileHH[i]), 'length': 18, 'name': RfileHH[i], 'precision': 11, 'type': 6}], 'INPUT' :Rshp1['OUTPUT'], 'OUTPUT': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Rmapshp' + '\\' + RfileHH[i] + '.shp'})
            Rraster = processing.run('qgis:idwinterpolation',{'DISTANCE_COEFFICIENT': 2,'EXTENT': extent,'INTERPOLATION_DATA':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Rmapshp' + '\\' + RfileHH[i] + '.shp' + '::~::0::~::0::~::0','PIXEL_SIZE': self.dlg.Psize.text(),'OUTPUT': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Rmap' + '\\' + RfileHH[i] + '.tif'})

        
        #vlayer1 = QgsVectorLayer(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Cstation2.shp', "R", "ogr")
        #QgsProject.instance().addMapLayer(vlayer1)


        self.dlg.progressBar.setValue(20)





        Kstor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : self.dlg.KshpL.currentText(), 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : self.dlg.Kshp.text(), 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Kmap.tif'})
        













        #LS
        slope_per = processing.run('qgis:slope',{ 'INPUT' :self.dlg.LSr.text(), 'OUTPUT' : myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P.tif', 'Z_FACTOR' : 1 })
        slope_rad = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': 'arctan(A/100)','INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_R.tif'})
        slope_deg = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '(A/pi)*180','INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_R.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_D.tif'})
        processing.run('native:rasterlayerzonalstats',{ 'BAND' : 1, 'INPUT' : self.dlg.LSr.text(), 'OUTPUT_TABLE' : myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'tmpsd.csv', 'REF_LAYER' : 0, 'ZONES' : self.dlg.LSr.text(), 'ZONES_BAND' : 1 })
        
        slope = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'tmpsd.csv','r',encoding ='utf-8',errors='ignore')
        
        slope_h = slope.readline()
        slope_L = slope.readlines()
        slope.close()
        slope_L = slope_L[0]
        slope_L = slope_L.replace('\n','')
        slope_L = slope_L.replace('"','')
        slope_L = slope_L.split(',')
        cellsize = math.sqrt(float(slope_L[1]) / float(slope_L[3]))

        slope_cell = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': cellsize,'INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_R.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'cellsize.tif'})

        slope_m = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '((A <= 0.01)*0.2) + ((A>0.01)*(A <= 0.03)*0.3) + ((A>0.03)*(A <=  0.05)*0.4) + ((A > 0.05)*0.5)','INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_R.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'LS_m.tif'})
        slope_LS = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': '1','BAND_C': 1,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '((B/22.13)**A)*((65.4*(sin(C))**2)+4.5*sin(C)+0.0654)','INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'LS_m.tif' ,'INPUT_B': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'cellsize.tif','INPUT_C': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_R.tif','INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'LS_map.tif'})
        slope_LS2 = processing.run('native:pixelstopoints',{'FIELD_NAME': 'VALUE','INPUT_RASTER': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'LS_map.tif','RASTER_BAND': 1,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'LS_map_vec.shp'})
        slope_LS3 = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'VALUE', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'LS_map_vec.shp', 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'LSmap.tif'})
        

        slope_LS2 = processing.run('native:pixelstopoints',{'FIELD_NAME': 'VALUE','INPUT_RASTER': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P.tif','RASTER_BAND': 1,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P_vec.shp'})
        slope_LS3 = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'VALUE', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P_vec.shp', 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P2.tif'})
        

        self.dlg.progressBar.setValue(40)




        
        Cshp = processing.run('qgis:refactorfields',{'FIELDS_MAPPING' : [{'expression': self.dlg.CshpL.currentText(), 'length': 18, 'name': self.dlg.CshpL.currentText(), 'precision': 0, 'type': 10}], 'INPUT' : self.dlg.Cshp.text(), 'OUTPUT': 'memory:'})
        Cshp1 = processing.run("qgis:joinattributestable",{'DISCARD_NONMATCHING':False, 'FIELD':self.dlg.CshpL.currentText(),'FIELDS_TO_COPY':[], 'FIELD_2':'Landuse','INPUT': Cshp['OUTPUT'],'INPUT_2': self.dlg.Ctable.text() ,'METHOD':1,'OUTPUT':'memory:'})

        #vlayer1 = QgsVectorLayer(Cshp1['OUTPUT'], "R", "ogr")
        #QgsProject.instance().addMapLayer(Cshp1['OUTPUT'])

        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Jan', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap01.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Feb', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap02.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Mar', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap03.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Apr', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap04.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'May', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap05.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Jun', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap06.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Jul', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap07.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Aug', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap08.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Sep', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap09.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Oct', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap10.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Nov', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap11.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Dec', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap12.tif'})



        self.dlg.progressBar.setValue(60)




        Pshp = processing.run('qgis:refactorfields',{'FIELDS_MAPPING' : [{'expression': self.dlg.PshpL.currentText(), 'length': 18, 'name': self.dlg.PshpL.currentText(), 'precision': 0, 'type': 10}], 'INPUT' : self.dlg.Pshp.text(), 'OUTPUT': 'memory:'})
        Pshp1 = processing.run('qgis:fieldcalculator',{'FIELD_LENGTH':10,'FIELD_NAME':'Pval','FIELD_PRECISION':3,'FIELD_TYPE':0,'FORMULA':'0','INPUT':Pshp['OUTPUT'],'NEW_FIELD':True,'OUTPUT':'memory:'})
        Parg = self.dlg.PshpL2.currentText()
        Parg = Parg.replace(' ','')
        Parg = Parg.split(',')
        layname = self.dlg.PshpL.currentText()
        #QgsProject.instance().addMapLayer(Pshp1['OUTPUT'])
        for i in range(len(Parg)):
            #formula1 = 'if("'+layname+'"="' + Parg[i] + '","1","Pval")'
            #QMessageBox.warning(None,"Warning",formula1)
            Pshp1 = processing.run('qgis:selectbyattribute',{'FIELD':layname,'INPUT':Pshp1['OUTPUT'],'METHOD':1,'OPERATOR':0,'VALUE':Parg[i],'OUTPUT':'memory:'})
            #Pshp1 = processing.run('qgis:fieldcalculator',{'FIELD_LENGTH':10,'FIELD_NAME':'Pval','FIELD_PRECISION':3,'FIELD_TYPE':0,'FORMULA':formula1,'INPUT':Pshp1['OUTPUT'],'NEW_FIELD':False,'OUTPUT':'memory:'})
        Pshp1 = processing.run('qgis:fieldcalculator',{'FIELD_LENGTH':10,'FIELD_NAME':'Pval','FIELD_PRECISION':3,'FIELD_TYPE':0,'FORMULA':'if( is_selected( ),1,-99)','INPUT':Pshp1['OUTPUT'],'NEW_FIELD':False,'OUTPUT':'memory:'})
        #QgsProject.instance().addMapLayer(Pshp1['OUTPUT'])
        Praster = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Pval', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Pshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'P' + '\\' + 'Ptmpmap2.tif'})
        


        Pcsv = open(self.dlg.Ptable.text(),'r')
        Phead = Pcsv.readline()
        Pline = Pcsv.readlines()
        Pcsv.close()
        Ptest = 'a'
        for i in range(len(Pline)):
            Pline2 = Pline[i].replace('\n','')
            Pline2 = Pline2.replace('"','')
            Pline2 = Pline2.split(',')

            Pline3 = Pline2[0].split('_')
            if Pline2[0].find('_') != -1 :
                if Ptest == 'a' :
                    Ptest = '((A>=' + Pline3[0] + ')*(A<'+Pline3[1]+')*'+Pline2[1]+')'
                else:
                    Ptest = Ptest + '+' +'((A>=' + Pline3[0] + ')*(A<'+Pline3[1]+')*'+Pline2[1]+')'
            else:
                Ptest = Ptest + '+' + '((A>='+ Pline3[0] + ')*' + Pline2[1] + ')'
        #QMessageBox.warning(None,"Warning",Ptest)

        pmap1 = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': Ptest,'INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'LS' + '\\' + 'slope_P2.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'P' + '\\' + 'Ptmpmap.tif'})
        pmap2 = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': '1','BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '(A<0)*1 + (A>0)*B','INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'P' + '\\' + 'Ptmpmap2.tif' ,'INPUT_B': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'P' + '\\' + 'Ptmpmap.tif','INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Pmap.tif'})
        

        self.dlg.progressBar.setValue(80)


        formula2 = 'A*B*C*D*E' + '*' + self.dlg.CFnum.text()
        for i in range(1,len(RfileHH)):
            Rmapfile = myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Rmap' + '\\' + RfileHH[i] + '.tif'
            mon = RfileHH[i]
            mon = mon[5:]
            pmap2 = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': '1','BAND_C': '1','BAND_D': '1','BAND_E': '1','BAND_F': None,'EXTRA': '','FORMULA':formula2,'INPUT_A': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Rmap' + '\\' + RfileHH[i] + '.tif' ,'INPUT_B': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Kmap.tif','INPUT_C': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'LSmap.tif','INPUT_D': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Cmap' + '\\' + 'Cmap' + mon + '.tif','INPUT_E': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Pmap.tif','INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Amap' + '\\' + 'A' + RfileHH[i].replace('R','') + '.tif'})
        

        self.dlg.progressBar.setValue(100)

        Wraster = processing.run('gdal:rasterize',{'BURN':1,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : None, 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : self.dlg.Wshp.text(), 'INVERT' : False, 'NODATA': 0, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' +  'Watershed.tif'})
        Acsv = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Amap.csv','a')
        Acsv.write('Date,Area(m2),value(ton/ha),value(ton)'+'\n')
        for i in range(1,len(RfileHH)):
            aa = processing.run('native:rasterlayerzonalstats',{'BAND':1, 'INPUT': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'Amap' + '\\' + RfileHH[i].replace('R','A') + '.tif','OUTPUT_TABLE':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Astat' + '\\' + RfileHH[i].replace('R','A') + '.csv','REF_LAYER':0,'ZONES': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' +  'Watershed.tif','ZONES_BAND':1})
            Atmpcsv1 = open(myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Astat' + '\\' + RfileHH[i].replace('R','A') + '.csv','r',encoding ='utf-8',errors='ignore')
            Atmph = Atmpcsv1.readline()
            Atmpl = Atmpcsv1.readline()
            Atmpl = Atmpl.replace('\n','')
            Atmpl = Atmpl.split(',')
            Acsv.write(RfileHH[i].replace('R','') + ',' + Atmpl[1] + ',' + Atmpl[6] + ',' + str(float(Atmpl[1]) * float(Atmpl[6])/10000) + '\n')
            Atmpcsv1.close()
        Acsv.close()






    def RunKORSLE2 (self):
        myDir = self.dlg.tmpDir.text()
        Dirnum = 1
        #QgsProject.instance().addMapLayer(extent3['OUTPUT'])
        aa = float(self.dlg.xmin.text()), float(self.dlg.xmin.text()), float(self.dlg.ymin.text()), float(self.dlg.ymax.text())
        extent = QgsRectangle()
        extent.setXMaximum(float(self.dlg.xmax.text()))
        extent.setXMinimum(float(self.dlg.xmin.text()))
        extent.setYMinimum(float(self.dlg.ymin.text()))
        extent.setYMaximum(float(self.dlg.ymax.text()))
        #for i in range(1,len(RfileHH)):
        processing.run('native:rasterlayerzonalstats',{'BAND':1, 'INPUT': myDir + '\\' + 'Results1' + '\\' + 'Rmap' + '\\' + RfileHH[i] + '.tif','OUTPUT_TABLE':myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' + 'Astat' + '\\' + RfileHH[i] + '.csv','REF_LAYER':0,'ZONES': myDir + '\\' + 'Results' + str(Dirnum) + '\\' + 'tmpDir' + '\\' +  'Watershed.tif','ZONES_BAND':1})



    def RunKORSLE3 (self):
        myDir = self.dlg.tmpDir.text()
        slope_per = processing.run('qgis:slope',{ 'INPUT' :self.dlg.LSr.text(), 'OUTPUT' : myDir + '\\' + 'Result' + '\\' + 'slope_P.tif', 'Z_FACTOR' : 1 })
        slope_rad = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': 'arctan(A/100)','INPUT_A': myDir + '\\' + 'Result' + '\\' + 'slope_P.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'slope_R.tif'})
        slope_deg = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '(A/pi)*180','INPUT_A': myDir + '\\' + 'Result' + '\\' + 'slope_R.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'slope_D.tif'})
        processing.run('native:rasterlayerzonalstats',{ 'BAND' : 1, 'INPUT' : self.dlg.LSr.text(), 'OUTPUT_TABLE' : myDir + '\\' + 'Result' + '\\' + 'tmpsd.csv', 'REF_LAYER' : 0, 'ZONES' : self.dlg.LSr.text(), 'ZONES_BAND' : 1 })
        
        slope = open(myDir + '\\' + 'Result' + '\\' + 'tmpsd.csv','r',encoding ='utf-8',errors='ignore')
        
        slope_h = slope.readline()
        slope_L = slope.readlines()
        slope.close()
        slope_L = slope_L[0]
        slope_L = slope_L.replace('\n','')
        slope_L = slope_L.replace('"','')
        slope_L = slope_L.split(',')
        cellsize = math.sqrt(float(slope_L[1]) / float(slope_L[3]))

        slope_cell = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': cellsize,'INPUT_A': myDir + '\\' + 'Result' + '\\' + 'slope_R.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'cellsize.tif'})

        slope_m = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '((A <= 0.01)*0.2) + ((A>0.01)*(A <= 0.03)*0.3) + ((A>0.03)*(A <=  0.05)*0.4) + ((A > 0.05)*0.5)','INPUT_A': myDir + '\\' + 'Result' + '\\' + 'slope_R.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'LS_m.tif'})
        slope_LS = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': '1','BAND_C': 1,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '((B/22.13)**A)*((65.4*(sin(C))**2)+4.5*sin(C)+0.0654)','INPUT_A': myDir + '\\' + 'Result' + '\\' + 'LS_m.tif' ,'INPUT_B': myDir + '\\' + 'Result' + '\\' + 'cellsize.tif','INPUT_C': myDir + '\\' + 'Result' + '\\' + 'slope_R.tif','INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'LS_map.tif'})
        
    def RunKORSLE4 (self):
        myDir = self.dlg.tmpDir.text()
        
        Cshp = processing.run('qgis:refactorfields',{'FIELDS_MAPPING' : [{'expression': self.dlg.CshpL.currentText(), 'length': 18, 'name': self.dlg.CshpL.currentText(), 'precision': 0, 'type': 10}], 'INPUT' : self.dlg.Cshp.text(), 'OUTPUT': 'memory:'})
        Cshp1 = processing.run("qgis:joinattributestable",{'DISCARD_NONMATCHING':False, 'FIELD':self.dlg.CshpL.currentText(),'FIELDS_TO_COPY':[], 'FIELD_2':'Landuse','INPUT': Cshp['OUTPUT'],'INPUT_2': self.dlg.Ctable.text() ,'METHOD':1,'OUTPUT':'memory:'})

        #vlayer1 = QgsVectorLayer(Cshp1['OUTPUT'], "R", "ogr")
        #QgsProject.instance().addMapLayer(Cshp1['OUTPUT'])
        aa = float(self.dlg.xmin.text()), float(self.dlg.xmin.text()), float(self.dlg.ymin.text()), float(self.dlg.ymax.text())
        extent = QgsRectangle()
        extent.setXMaximum(float(self.dlg.xmax.text()))
        extent.setXMinimum(float(self.dlg.xmin.text()))
        extent.setYMinimum(float(self.dlg.ymin.text()))
        extent.setYMaximum(float(self.dlg.ymax.text()))
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Jan', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap01.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Feb', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap02.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Mar', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap03.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Apr', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap04.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'May', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap05.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Jun', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap06.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Jul', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap07.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Aug', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap08.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Sep', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap09.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Oct', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap10.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Nov', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap11.tif'})
        Crastor = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Dec', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Cshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Results' + '\\' + 'Cmap12.tif'})

    def RunKORSLE5 (self):
        myDir = self.dlg.tmpDir.text()
        aa = float(self.dlg.xmin.text()), float(self.dlg.xmin.text()), float(self.dlg.ymin.text()), float(self.dlg.ymax.text())
        extent = QgsRectangle()
        extent.setXMaximum(float(self.dlg.xmax.text()))
        extent.setXMinimum(float(self.dlg.xmin.text()))
        extent.setYMinimum(float(self.dlg.ymin.text()))
        extent.setYMaximum(float(self.dlg.ymax.text()))

        Pshp = processing.run('qgis:refactorfields',{'FIELDS_MAPPING' : [{'expression': self.dlg.PshpL.currentText(), 'length': 18, 'name': self.dlg.PshpL.currentText(), 'precision': 0, 'type': 10}], 'INPUT' : self.dlg.Pshp.text(), 'OUTPUT': 'memory:'})
        Pshp1 = processing.run('qgis:fieldcalculator',{'FIELD_LENGTH':10,'FIELD_NAME':'Pval','FIELD_PRECISION':3,'FIELD_TYPE':0,'FORMULA':'0','INPUT':Pshp['OUTPUT'],'NEW_FIELD':True,'OUTPUT':'memory:'})
        Parg = self.dlg.PshpL2.currentText()
        Parg = Parg.replace(' ','')
        Parg = Parg.split(',')
        layname = self.dlg.PshpL.currentText()
        #QgsProject.instance().addMapLayer(Pshp1['OUTPUT'])
        for i in range(len(Parg)):
            #formula1 = 'if("'+layname+'"="' + Parg[i] + '","1","Pval")'
            #QMessageBox.warning(None,"Warning",formula1)
            Pshp1 = processing.run('qgis:selectbyattribute',{'FIELD':layname,'INPUT':Pshp1['OUTPUT'],'METHOD':1,'OPERATOR':0,'VALUE':Parg[i],'OUTPUT':'memory:'})
            #Pshp1 = processing.run('qgis:fieldcalculator',{'FIELD_LENGTH':10,'FIELD_NAME':'Pval','FIELD_PRECISION':3,'FIELD_TYPE':0,'FORMULA':formula1,'INPUT':Pshp1['OUTPUT'],'NEW_FIELD':False,'OUTPUT':'memory:'})
        Pshp1 = processing.run('qgis:fieldcalculator',{'FIELD_LENGTH':10,'FIELD_NAME':'Pval','FIELD_PRECISION':3,'FIELD_TYPE':0,'FORMULA':'if( is_selected( ),1,-99)','INPUT':Pshp1['OUTPUT'],'NEW_FIELD':False,'OUTPUT':'memory:'})
        #QgsProject.instance().addMapLayer(Pshp1['OUTPUT'])
        Praster = processing.run('gdal:rasterize',{'BURN':0,'DATA_TYPE':5,'EXTENT': extent, 'EXTRA' : '', 'FIELD' : 'Pval', 'HEIGHT' : self.dlg.Psize.text(), 'INIT' : None, 'INPUT' : Pshp1['OUTPUT'], 'INVERT' : False, 'NODATA': -9999, 'OPTIONS':'','UNITS':1,'WIDTH':self.dlg.Psize.text(),'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'Ptmpmap2.tif'})
        


        Pcsv = open(self.dlg.Ptable.text(),'r')
        Phead = Pcsv.readline()
        Pline = Pcsv.readlines()
        Pcsv.close()
        Ptest = 'a'
        for i in range(len(Pline)):
            Pline2 = Pline[i].replace('\n','')
            Pline2 = Pline2.replace('"','')
            Pline2 = Pline2.split(',')

            Pline3 = Pline2[0].split('_')
            if Pline2[0].find('_') != -1 :
                if Ptest == 'a' :
                    Ptest = '((A>=' + Pline3[0] + ')*(A<'+Pline3[1]+')*'+Pline2[1]+')'
                else:
                    Ptest = Ptest + '+' +'((A>=' + Pline3[0] + ')*(A<'+Pline3[1]+')*'+Pline2[1]+')'
            else:
                Ptest = Ptest + '+' + '((A>='+ Pline3[0] + ')*' + Pline2[1] + ')'
        #QMessageBox.warning(None,"Warning",Ptest)

        pmap1 = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': None,'BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': Ptest,'INPUT_A': myDir + '\\' + 'Result' + '\\' + 'slope_P.tif' ,'INPUT_B': None,'INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'Ptmpmap.tif'})
        pmap2 = processing.run('gdal:rastercalculator',{'BAND_A': '1','BAND_B': '1','BAND_C': None,'BAND_D': None,'BAND_E': None,'BAND_F': None,'EXTRA': '','FORMULA': '(A<0)*1 + (A>0)*B','INPUT_A': myDir + '\\' + 'Result' + '\\' + 'Ptmpmap2.tif' ,'INPUT_B': myDir + '\\' + 'Result' + '\\' + 'Ptmpmap.tif','INPUT_C': None,'INPUT_D': None,'INPUT_E': None,'INPUT_F': None,'NO_DATA': None,'OPTIONS': '','RTYPE': 5,'OUTPUT':myDir + '\\' + 'Result' + '\\' + 'Pmap.tif'})
        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Quantum_KORSLEDialog()




            a = ['95','98','101','102','108','112','114','115','121','127','129','130','131','133','140','146','156','159','162','169','170','184','185','189','192','201','202','203','211','212','216','221','226','232','235','236','238','243','244','245','247','248','260','272','273','278','284']
            self.dlg.stano1.addItems(a)
            a = ['철원','동두천','춘천','백령도','서울','인천','원주','울릉도','영월','충주','서산','울진','청주','대전','군산','전주','광주','부산','통영','흑산도','완도','제주','고산','서귀포','진주','강화','양평','이천','인제','홍천','태백','제천','보은','천안','보령','부여','금산','부안','임실','정읍','남원','장수','장흥','영주','문경','의성','거창']
            self.dlg.stano2.addItems(a)
            self.dlg.stano1.currentIndexChanged.connect(self.staindexch1)
            self.dlg.stano2.currentIndexChanged.connect(self.staindexch2)
            self.dlg.radioR1.toggled.connect(self.radioR1check)
            self.dlg.radioR2.toggled.connect(self.radioR2check)
            self.dlg.raindataB.clicked.connect(self.raindataE)
            self.dlg.CstationB.clicked.connect(self.CstationE)
            self.dlg.tmpDirB.clicked.connect(self.tmpDirE)
            self.dlg.Cstation.textChanged.connect(self.CstationLE)
            self.dlg.RrasterB.clicked.connect(self.RrasterE)

            self.dlg.LSrB.clicked.connect(self.LSrE)
            self.dlg.LSr2B.clicked.connect(self.LSr2E)

            self.dlg.KrasterB.clicked.connect(self.KrasterE)
            self.dlg.KshpB.clicked.connect(self.KshpE)
            self.dlg.Kshp.textChanged.connect(self.KshpLE)
           

            self.dlg.CtableB.clicked.connect(self.CtableE)
            self.dlg.CshpB.clicked.connect(self.CshpE)
            self.dlg.Cshp.textChanged.connect(self.CshpLE)


            self.dlg.PtableB.clicked.connect(self.PtableE)
            self.dlg.PshpB.clicked.connect(self.PshpE)
            self.dlg.Pshp.textChanged.connect(self.PshpLE)
            self.dlg.PshpL.currentIndexChanged.connect(self.PshpL2E)



            self.dlg.WshpB.clicked.connect(self.WshpE)
            self.dlg.Wshp.textChanged.connect(self.WshpLE)

            #self.onlyDouble = QDoubleValidator()
            #self.dlg.Kfactor.setValidator(QDoubleValidator())


            self.dlg.Runbutton.clicked.connect(self.RunKORSLE)
            self.dlg.Runbutton_2.clicked.connect(self.RunKORSLE2)
            self.dlg.Runbutton_3.clicked.connect(self.RunKORSLE3)
            self.dlg.Runbutton_4.clicked.connect(self.RunKORSLE4)
            self.dlg.Runbutton_5.clicked.connect(self.RunKORSLE5)


            #self.dlg.Cstation.clear()
            #self.dlg.Cstation.setText('D:\KORSLE\ClimateStation.shp')


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
